{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "iacOrchestrator": {
      "type": "string",
      "defaultValue": "iac-orchestrator",
      "metadata": {
          "description": "iac Admin Managed Identity name"
      }
    },
    "vnetName": {
        "type": "string",
        "defaultValue": "iac-vnet",
        "metadata": {
            "description": "VNet name"
        }
    },
    "vnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/16",
        "metadata": {
            "description": "Address prefix"
        }
    },
    "subnetAddressPrefixes": {
        "type": "array", 
        "defaultValue": ["10.0.0.0/24"],
        "metadata": {
            "description": "Subnet prefixes List, should have exactly same number of element as subnet names list. Otherwise, the virtual network won't be deployed"
        }
    },
    "subnetNames": {
        "type": "array",
        "defaultValue": ["iac-subnet-001"],
        "metadata": {
            "description": "Subnet names List, should have exactly same number of element as subnet prefixes list. Otherwise, the virtual network won't be deployed"
        }
    },
    "keyVaultName": {
        "type": "string",
        "defaultValue": "[uniquestring(resourceGroup().id)]",
        "metadata": {
          "description": "KeyVault Name, has to be globally unique"
        }
    },
    "keyVaultSku": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Standard",
          "Premium" ],
        "metadata": { 
          "description": "KeyVault SKU"
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "certsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to certificates in the vault. Valid values are: All, Get, List, Update, Create, Import, Delete, Recover, Backup, Restore, ManageContacts, ManageIssuers, GetIssuers, ListIssuers, SetIssuers and DeleteIssuers."
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": {
        "secrets":  [
          {            
            "secretName": "exampleSecret1",
            "secretValue": "secretVaule1"
          },
          {            
            "secretName": "exampleSecret2",
            "secretValue": "secretValue2"
          }            
        ]   
      },
      "metadata": {
        "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[uniquestring(resourceGroup().id)]",
      "metadata": {
        "description": "Storage Account Name"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "iac-fs-001",
      "metadata": {
        "description": "File Share Name"
      }
    }
  },    
  "variables": {
    "iacOrchestratorId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('iacOrchestrator'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[parameters('iacOrchestrator')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "dependsOn": []
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2017-05-01",
      "name": "[guid(subscription().subscriptionId)]",
      "dependsOn": [
        "[variables('iacOrchestratorId')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(variables('iacOrchestratorId'), '2018-11-30', 'Full').properties.principalId]",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "sku": { "name": "[parameters('storageAccountType')]" },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "name": "[parameters('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "condition": "[equals(length(parameters('subnetAddressPrefixes')), length(parameters('subnetNames')))]",
      "dependsOn": [],
      "tags": { "displayName": "VnetName" },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('subnetNames'))]",
            "input": {
              "name": "[parameters('subnetNames')[copyIndex('subnets')]]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes')[copyIndex('subnets')]]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "dependsOn": ["[variables('iacOrchestratorId')]"],
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference(variables('iacOrchestratorId'), '2018-11-30', 'Full').properties.principalId]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]",      
              "certificates": "[parameters('certsPermissions')]"
            }
          }
        ],
        "sku": {
          "name": "[parameters('keyVaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "condition": "[greater(length(parameters('secretsObject').secrets),0)]",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      },
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      }
    }
  ],
  "outputs": {}
}