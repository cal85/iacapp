{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "iacOrchestrator": {
      "type": "string",
      "defaultValue": "iac-orchestrator",
      "metadata": {
          "description": "iac Admin Managed Identity name"
      }
    },
    "vnetName": {
        "type": "string",
        "defaultValue": "iac-vnet",
        "metadata": {
            "description": "VNet name"
        }
    },
    "vnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/8",
        "metadata": {
            "description": "Address prefix"
        }
    },
    "subnetAddressPrefixes": {
        "type": "array", 
        "defaultValue": ["10.0.0.0/24"],
        "metadata": {
            "description": "Subnet prefixes List, should have exactly same number of element as subnet names list. Otherwise, the virtual network won't be deployed"
        }
    },
    "subnetNames": {
        "type": "array",
        "defaultValue": ["iac-subnet-001"],
        "metadata": {
            "description": "Subnet names List, should have exactly same number of element as subnet prefixes list. Otherwise, the virtual network won't be deployed"
        }
    },
    "GatewaySubnetName": {
      "type": "string",
      "defaultValue": "GatewaySubnet",
      "metadata": {
        "description": "Gateway subnet Name for the virtual network gateway"
      }
    },
    "GatewaySubnetPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/24",
      "metadata": {
        "description": "Gateway subnet prefix for the virtual network gateway"
      }
    },
    "vgwCertPubKey": {
      "type": "string",
      "defaultValue": "MIIDIzCCAg+gAwIBAgIQDyQQgy/o4bhN4EcWYq5Y3zAJBgUrDgMCHQUAMCQxIjAgBgNVBAMTGVJvb3RDZXJ0aWZpY2F0ZURDU29uQXp1cmUwHhcNMTcwMTEwMDY0MzU1WhcNMzkxMjMxMjM1OTU5WjAkMSIwIAYDVQQDExlSb290Q2VydGlmaWNhdGVEQ1NvbkF6dXJlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0mxGG/1h7xWrjmNLoznBgPpbzAMlcPUhc4bPsYxhE2G9F1QY1gf+3qWAE3NjOhxCXtHgc30mdTrm9naWpNblXVryI+tlWozerCuK4dfLiKeqIPePTjjZ53LM2XNOQX/JJfKINGdxKoJ8jLq7BuunKWQDBuk9JcA2GN+424LVhCWLLWlAF1JdK5MbuG04Oj9BBSRP5G4YYfBVAk6I0e+TX8jttvoWeG3DFpyALxDfwZlGmbGMVfoBRw84gBQ99J8GcnS6QZYsXu/x/qZ0lBvx2g6jG/suYpRN2IZQG+tdr7bCyvVvdfIsWtQTvy7xf17yfmv6YKBw2enJiOEvaDQamwIDAQABo1kwVzBVBgNVHQEETjBMgBDdkTNrh2cniAdngmmdSZuNoSYwJDEiMCAGA1UEAxMZUm9vdENlcnRpZmljYXRlRENTb25BenVyZYIQDyQQgy/o4bhN4EcWYq5Y3zAJBgUrDgMCHQUAA4IBAQAj2XpDNr6wCD5/4a0ACiLNYZnZH8RQTywEeZqcDsntfgX5JT9H2KozWdyKaOj9+BcMPn86UXITreeBLgU2lsaZcTRyKs1WrytJ81fdmhkrwbi4+ggYFxaBSXmwXk8lA47SmogE606EoSdoDVKl4Oklrb2zzP8TAU8Unc3W7CX/77NvTwnJMK+krqcc+VuTAG6+nOmzHlh8S23Iz2t2d9sACPxkQG/mFjIVVwwVSbxOj6wxB5M6Q0wR23NxhHClF3J9AKgM8rwGEYLoJCB2oy36J6FFDF2MvlPdCo8eMQvGikJdBVi9M+hxG1i34vO71LSkftdKlxvVsf6w0lccgUBD",
      "metadata": {
        "description": "Virtual Network Gateway P2S VPN certificate public key"
      }
    },
    "keyVaultName": {
        "type": "string",
        "defaultValue": "[uniquestring(resourceGroup().id)]",
        "metadata": {
          "description": "KeyVault Name, has to be globally unique"
        }
    },
    "keyVaultSku": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Standard",
          "Premium" ],
        "metadata": { 
          "description": "KeyVault SKU"
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "certsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to certificates in the vault. Valid values are: All, Get, List, Update, Create, Import, Delete, Recover, Backup, Restore, ManageContacts, ManageIssuers, GetIssuers, ListIssuers, SetIssuers and DeleteIssuers."
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": {
        "secrets":  [
          {            
            "secretName": "exampleSecret1",
            "secretValue": "secretVaule1"
          },
          {            
            "secretName": "exampleSecret2",
            "secretValue": "secretValue2"
          }            
        ]   
      },
      "metadata": {
        "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[uniquestring(resourceGroup().id)]",
      "metadata": {
        "description": "Storage Account Name"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "iac-fs-001",
      "metadata": {
        "description": "File Share Name"
      }
    }
  },    
  "variables": {
    "iacOrchestratorId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('iacOrchestrator'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[parameters('iacOrchestrator')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "dependsOn": []
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "iacVMAgent",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "dependsOn": []
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2017-05-01",
      "name": "[guid(subscription().subscriptionId)]",
      "dependsOn": [
        "[variables('iacOrchestratorId')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(variables('iacOrchestratorId'), '2018-11-30', 'Full').properties.principalId]",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "sku": { "name": "[parameters('storageAccountType')]" },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "sku": {
          "name": "Basic",
          "tier": "Regional"
      },
      "name": "[concat(parameters('vnetName'),'-pip')]",
      "apiVersion": "2018-10-01",
      "location": "southeastasia",
      "scale": null,
      "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Dynamic",
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[concat(parameters('vnetName'),'-vgw')]",
      "apiVersion": "2018-10-01",
      "location": "southeastasia",
      "scale": null,
      "properties": {
          "ipConfigurations": [
              {
                  "name": "default",
                  "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                          "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vnetName'),'-pip'))]"
                      },
                      "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'GatewaySubnet')]"
                      }
                  }
              }
          ],
          "sku": {
              "name": "Basic",
              "tier": "Basic",
              "capacity": 2
          },
          "gatewayType": "Vpn",
          "vpnType": "RouteBased",
          "enableBgp": false,
          "activeActive": false,
          "vpnClientConfiguration": {
              "vpnClientAddressPool": {
                  "addressPrefixes": [
                      "192.168.113.0/24"
                  ]
              },
              "vpnClientProtocols": [
                  "SSTP"
              ],
              "vpnClientRootCertificates": [
                  {
                      "name": "IaC",
                      "properties": {
                          "publicCertData": "[parameters('vgwCertPubKey')]"
                      }
                  }
              ],
              "vpnClientRevokedCertificates": [],
              "vpnClientIpsecPolicies": []
          }
      },
      "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vnetName'),'-pip'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "name": "[parameters('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "condition": "[equals(length(parameters('subnetAddressPrefixes')), length(parameters('subnetNames')))]",
      "dependsOn": [],
      "tags": { "displayName": "VnetName" },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('subnetNames'))]",
            "input": {
              "name": "[parameters('subnetNames')[copyIndex('subnets')]]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefixes')[copyIndex('subnets')]]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-04-01",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[parameters('GatewaySubnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressPrefix": "[parameters('GatewaySubnetPrefix')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "dependsOn": ["[variables('iacOrchestratorId')]"],
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference(variables('iacOrchestratorId'), '2018-11-30', 'Full').properties.principalId]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]",      
              "certificates": "[parameters('certsPermissions')]"
            }
          }
        ],
        "sku": {
          "name": "[parameters('keyVaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/', if(equals(length(parameters('secretsObject').secrets), 0), 'none', parameters('secretsObject').secrets[copyIndex()].secretName))]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "condition": "[greater(length(parameters('secretsObject').secrets),0)]",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[if(equals(length(parameters('secretsObject').secrets), 0), 1, length(parameters('secretsObject').secrets))]"
      },
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/vnetName')]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "dependsOn": ["[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"],
      "properties": { "value": "parameters('vnetName')"}
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/fileShareName')]",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "dependsOn": ["[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"],
      "properties": { "value": "parameters('fileShareName')"}
    }
  ],
  "outputs": {}
}